# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Cluster', [dirname(__file__)])
        except ImportError:
            import _Cluster
            return _Cluster
        if fp is not None:
            try:
                _mod = imp.load_module('_Cluster', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Cluster = swig_import_helper()
    del swig_import_helper
else:
    import _Cluster
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Cluster.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Cluster.SwigPyIterator_value(self)
    def incr(self, n=1): return _Cluster.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Cluster.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Cluster.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Cluster.SwigPyIterator_equal(self, *args)
    def copy(self): return _Cluster.SwigPyIterator_copy(self)
    def next(self): return _Cluster.SwigPyIterator_next(self)
    def __next__(self): return _Cluster.SwigPyIterator___next__(self)
    def previous(self): return _Cluster.SwigPyIterator_previous(self)
    def advance(self, *args): return _Cluster.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Cluster.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Cluster.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Cluster.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Cluster.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Cluster.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Cluster.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Cluster.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _Cluster.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Cluster.DoubleVector___nonzero__(self)
    def __bool__(self): return _Cluster.DoubleVector___bool__(self)
    def __len__(self): return _Cluster.DoubleVector___len__(self)
    def pop(self): return _Cluster.DoubleVector_pop(self)
    def __getslice__(self, *args): return _Cluster.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _Cluster.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _Cluster.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _Cluster.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _Cluster.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _Cluster.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _Cluster.DoubleVector_append(self, *args)
    def empty(self): return _Cluster.DoubleVector_empty(self)
    def size(self): return _Cluster.DoubleVector_size(self)
    def clear(self): return _Cluster.DoubleVector_clear(self)
    def swap(self, *args): return _Cluster.DoubleVector_swap(self, *args)
    def get_allocator(self): return _Cluster.DoubleVector_get_allocator(self)
    def begin(self): return _Cluster.DoubleVector_begin(self)
    def end(self): return _Cluster.DoubleVector_end(self)
    def rbegin(self): return _Cluster.DoubleVector_rbegin(self)
    def rend(self): return _Cluster.DoubleVector_rend(self)
    def pop_back(self): return _Cluster.DoubleVector_pop_back(self)
    def erase(self, *args): return _Cluster.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _Cluster.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Cluster.DoubleVector_push_back(self, *args)
    def front(self): return _Cluster.DoubleVector_front(self)
    def back(self): return _Cluster.DoubleVector_back(self)
    def assign(self, *args): return _Cluster.DoubleVector_assign(self, *args)
    def resize(self, *args): return _Cluster.DoubleVector_resize(self, *args)
    def insert(self, *args): return _Cluster.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _Cluster.DoubleVector_reserve(self, *args)
    def capacity(self): return _Cluster.DoubleVector_capacity(self)
    __swig_destroy__ = _Cluster.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _Cluster.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVector2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector2d, name)
    __repr__ = _swig_repr
    def iterator(self): return _Cluster.DoubleVector2d_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Cluster.DoubleVector2d___nonzero__(self)
    def __bool__(self): return _Cluster.DoubleVector2d___bool__(self)
    def __len__(self): return _Cluster.DoubleVector2d___len__(self)
    def pop(self): return _Cluster.DoubleVector2d_pop(self)
    def __getslice__(self, *args): return _Cluster.DoubleVector2d___getslice__(self, *args)
    def __setslice__(self, *args): return _Cluster.DoubleVector2d___setslice__(self, *args)
    def __delslice__(self, *args): return _Cluster.DoubleVector2d___delslice__(self, *args)
    def __delitem__(self, *args): return _Cluster.DoubleVector2d___delitem__(self, *args)
    def __getitem__(self, *args): return _Cluster.DoubleVector2d___getitem__(self, *args)
    def __setitem__(self, *args): return _Cluster.DoubleVector2d___setitem__(self, *args)
    def append(self, *args): return _Cluster.DoubleVector2d_append(self, *args)
    def empty(self): return _Cluster.DoubleVector2d_empty(self)
    def size(self): return _Cluster.DoubleVector2d_size(self)
    def clear(self): return _Cluster.DoubleVector2d_clear(self)
    def swap(self, *args): return _Cluster.DoubleVector2d_swap(self, *args)
    def get_allocator(self): return _Cluster.DoubleVector2d_get_allocator(self)
    def begin(self): return _Cluster.DoubleVector2d_begin(self)
    def end(self): return _Cluster.DoubleVector2d_end(self)
    def rbegin(self): return _Cluster.DoubleVector2d_rbegin(self)
    def rend(self): return _Cluster.DoubleVector2d_rend(self)
    def pop_back(self): return _Cluster.DoubleVector2d_pop_back(self)
    def erase(self, *args): return _Cluster.DoubleVector2d_erase(self, *args)
    def __init__(self, *args): 
        this = _Cluster.new_DoubleVector2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Cluster.DoubleVector2d_push_back(self, *args)
    def front(self): return _Cluster.DoubleVector2d_front(self)
    def back(self): return _Cluster.DoubleVector2d_back(self)
    def assign(self, *args): return _Cluster.DoubleVector2d_assign(self, *args)
    def resize(self, *args): return _Cluster.DoubleVector2d_resize(self, *args)
    def insert(self, *args): return _Cluster.DoubleVector2d_insert(self, *args)
    def reserve(self, *args): return _Cluster.DoubleVector2d_reserve(self, *args)
    def capacity(self): return _Cluster.DoubleVector2d_capacity(self)
    __swig_destroy__ = _Cluster.delete_DoubleVector2d
    __del__ = lambda self : None;
DoubleVector2d_swigregister = _Cluster.DoubleVector2d_swigregister
DoubleVector2d_swigregister(DoubleVector2d)

class Cluster(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cluster, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cluster, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Cluster.new_Cluster(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Cluster.delete_Cluster
    __del__ = lambda self : None;
    def f_phi(self): return _Cluster.Cluster_f_phi(self)
    def f_dphi(self): return _Cluster.Cluster_f_dphi(self)
    def f_d2phi(self): return _Cluster.Cluster_f_d2phi(self)
    def f_D(self): return _Cluster.Cluster_f_D(self)
    def f_dD(self): return _Cluster.Cluster_f_dD(self)
    def f_d2D(self): return _Cluster.Cluster_f_d2D(self)
    def f_H(self): return _Cluster.Cluster_f_H(self)
    def f_dH(self): return _Cluster.Cluster_f_dH(self)
    def f_sigma(self): return _Cluster.Cluster_f_sigma(self)
    def f_dsigma(self): return _Cluster.Cluster_f_dsigma(self)
    def ksi(self): return _Cluster.Cluster_ksi(self)
    def change_coefs(self): return _Cluster.Cluster_change_coefs(self)
    def step_traectories(self): return _Cluster.Cluster_step_traectories(self)
    def leap(self): return _Cluster.Cluster_leap(self)
    def time_loop(self): return _Cluster.Cluster_time_loop(self)
    __swig_setmethods__["phi"] = _Cluster.Cluster_phi_set
    __swig_getmethods__["phi"] = _Cluster.Cluster_phi_get
    if _newclass:phi = _swig_property(_Cluster.Cluster_phi_get, _Cluster.Cluster_phi_set)
    __swig_setmethods__["dphi"] = _Cluster.Cluster_dphi_set
    __swig_getmethods__["dphi"] = _Cluster.Cluster_dphi_get
    if _newclass:dphi = _swig_property(_Cluster.Cluster_dphi_get, _Cluster.Cluster_dphi_set)
    __swig_setmethods__["d2phi"] = _Cluster.Cluster_d2phi_set
    __swig_getmethods__["d2phi"] = _Cluster.Cluster_d2phi_get
    if _newclass:d2phi = _swig_property(_Cluster.Cluster_d2phi_get, _Cluster.Cluster_d2phi_set)
    __swig_setmethods__["D"] = _Cluster.Cluster_D_set
    __swig_getmethods__["D"] = _Cluster.Cluster_D_get
    if _newclass:D = _swig_property(_Cluster.Cluster_D_get, _Cluster.Cluster_D_set)
    __swig_setmethods__["dD"] = _Cluster.Cluster_dD_set
    __swig_getmethods__["dD"] = _Cluster.Cluster_dD_get
    if _newclass:dD = _swig_property(_Cluster.Cluster_dD_get, _Cluster.Cluster_dD_set)
    __swig_setmethods__["d2D"] = _Cluster.Cluster_d2D_set
    __swig_getmethods__["d2D"] = _Cluster.Cluster_d2D_get
    if _newclass:d2D = _swig_property(_Cluster.Cluster_d2D_get, _Cluster.Cluster_d2D_set)
    __swig_setmethods__["g"] = _Cluster.Cluster_g_set
    __swig_getmethods__["g"] = _Cluster.Cluster_g_get
    if _newclass:g = _swig_property(_Cluster.Cluster_g_get, _Cluster.Cluster_g_set)
    __swig_setmethods__["g_hist"] = _Cluster.Cluster_g_hist_set
    __swig_getmethods__["g_hist"] = _Cluster.Cluster_g_hist_get
    if _newclass:g_hist = _swig_property(_Cluster.Cluster_g_hist_get, _Cluster.Cluster_g_hist_set)
    __swig_setmethods__["g_i"] = _Cluster.Cluster_g_i_set
    __swig_getmethods__["g_i"] = _Cluster.Cluster_g_i_get
    if _newclass:g_i = _swig_property(_Cluster.Cluster_g_i_get, _Cluster.Cluster_g_i_set)
    __swig_setmethods__["var"] = _Cluster.Cluster_var_set
    __swig_getmethods__["var"] = _Cluster.Cluster_var_get
    if _newclass:var = _swig_property(_Cluster.Cluster_var_get, _Cluster.Cluster_var_set)
    __swig_setmethods__["speed"] = _Cluster.Cluster_speed_set
    __swig_getmethods__["speed"] = _Cluster.Cluster_speed_get
    if _newclass:speed = _swig_property(_Cluster.Cluster_speed_get, _Cluster.Cluster_speed_set)
    __swig_setmethods__["g0"] = _Cluster.Cluster_g0_set
    __swig_getmethods__["g0"] = _Cluster.Cluster_g0_get
    if _newclass:g0 = _swig_property(_Cluster.Cluster_g0_get, _Cluster.Cluster_g0_set)
    __swig_setmethods__["a"] = _Cluster.Cluster_a_set
    __swig_getmethods__["a"] = _Cluster.Cluster_a_get
    if _newclass:a = _swig_property(_Cluster.Cluster_a_get, _Cluster.Cluster_a_set)
    __swig_setmethods__["b"] = _Cluster.Cluster_b_set
    __swig_getmethods__["b"] = _Cluster.Cluster_b_get
    if _newclass:b = _swig_property(_Cluster.Cluster_b_get, _Cluster.Cluster_b_set)
    __swig_setmethods__["c"] = _Cluster.Cluster_c_set
    __swig_getmethods__["c"] = _Cluster.Cluster_c_get
    if _newclass:c = _swig_property(_Cluster.Cluster_c_get, _Cluster.Cluster_c_set)
    __swig_setmethods__["D0"] = _Cluster.Cluster_D0_set
    __swig_getmethods__["D0"] = _Cluster.Cluster_D0_get
    if _newclass:D0 = _swig_property(_Cluster.Cluster_D0_get, _Cluster.Cluster_D0_set)
    __swig_setmethods__["kT"] = _Cluster.Cluster_kT_set
    __swig_getmethods__["kT"] = _Cluster.Cluster_kT_get
    if _newclass:kT = _swig_property(_Cluster.Cluster_kT_get, _Cluster.Cluster_kT_set)
    __swig_setmethods__["g_k"] = _Cluster.Cluster_g_k_set
    __swig_getmethods__["g_k"] = _Cluster.Cluster_g_k_get
    if _newclass:g_k = _swig_property(_Cluster.Cluster_g_k_get, _Cluster.Cluster_g_k_set)
    __swig_setmethods__["h"] = _Cluster.Cluster_h_set
    __swig_getmethods__["h"] = _Cluster.Cluster_h_get
    if _newclass:h = _swig_property(_Cluster.Cluster_h_get, _Cluster.Cluster_h_set)
    __swig_setmethods__["NTr"] = _Cluster.Cluster_NTr_set
    __swig_getmethods__["NTr"] = _Cluster.Cluster_NTr_get
    if _newclass:NTr = _swig_property(_Cluster.Cluster_NTr_get, _Cluster.Cluster_NTr_set)
    __swig_setmethods__["Time"] = _Cluster.Cluster_Time_set
    __swig_getmethods__["Time"] = _Cluster.Cluster_Time_get
    if _newclass:Time = _swig_property(_Cluster.Cluster_Time_get, _Cluster.Cluster_Time_set)
    __swig_setmethods__["q"] = _Cluster.Cluster_q_set
    __swig_getmethods__["q"] = _Cluster.Cluster_q_get
    if _newclass:q = _swig_property(_Cluster.Cluster_q_get, _Cluster.Cluster_q_set)
    __swig_setmethods__["change_coefs_freq"] = _Cluster.Cluster_change_coefs_freq_set
    __swig_getmethods__["change_coefs_freq"] = _Cluster.Cluster_change_coefs_freq_get
    if _newclass:change_coefs_freq = _swig_property(_Cluster.Cluster_change_coefs_freq_get, _Cluster.Cluster_change_coefs_freq_set)
Cluster_swigregister = _Cluster.Cluster_swigregister
Cluster_swigregister(Cluster)

# This file is compatible with both classic and new-style classes.


